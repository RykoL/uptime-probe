package static

import (
	"fmt"
	"github.com/RykoL/uptime-probe/web/model"
	"time"
)

func FormatRelativeTime(base time.Time, other time.Time) string {
	diff := base.Sub(other)

	if diff < time.Minute {
		return fmt.Sprintf("%dm ago", int(diff.Seconds()/60))
	} else if diff < time.Hour {
		return fmt.Sprintf("%dh ago", int(diff.Minutes()/60))
	} else if diff < 24*time.Hour {
		return fmt.Sprintf("%dh ago", int(diff.Hours()))
	} else if diff < 30*24*time.Hour { // Up to 30 days
		return fmt.Sprintf("%dd ago", int(diff.Hours()/24))
	} else if diff < 365*24*time.Hour {
		return fmt.Sprintf("%dm ago", int(diff.Hours()/24/30)) // returns months
	} else {
		return fmt.Sprintf("%dy ago", int(diff.Hours()/24/365)) // returns years
	}
}

templ Monitor(monitor *model.Monitor) {
	<div class="monitor">
		<section class="monitor-info">
			<h2 class="monitor-info-name">{ monitor.Name }</h2>
			<div class="monitor-info-status">
				Status:
				@MonitorStatus(monitor.Status())
			</div>
		</section>
		<section class="probe-status">
			<div class="probe-status-display">
				if len(monitor.Results) > 0 {
					for _, probeResult := range monitor.Results {
						@ProbeStatusPill(probeResult.Status())
					}
				}
			</div>
			<div class="probe-status-time-info">
				<span>{ FormatRelativeTime(monitor.LatestProbeResult().Timestamp, monitor.OldestProbeResult().Timestamp) }</span>
				<span>now</span>
			</div>
		</section>
	</div>
}

templ ProbeStatusPill(status string) {
	<div class={ "probe-status-pill", getStatusPageBackground(status) }></div>
}

templ MonitorStatus(status string) {
	<span class={ "pill", getStatusPageBackground(status) }>{ status }</span>
}

func getStatusPageBackground(status string) string {
	switch status {
	case "Up":
		return "pill-green"
	case "Down":
		return "pill-red"
	case "Pending":
		return "pill-amber"
	default:
		return "pill-gray"
	}
}
